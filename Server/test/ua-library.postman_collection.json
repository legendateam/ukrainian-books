{
	"info": {
		"_postman_id": "ce186bc7-574c-4ad2-876c-8af7e6e1861c",
		"name": "My-UA-Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17155101"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth Registration without avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"const responseData = response.data;\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check repsonse value in status\", () => {\r",
									"    const status = response.status;\r",
									"    pm.expect(status).to.eql(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response value in message\", () => {\r",
									"    const message = response.message;\r",
									"    pm.expect(message).to.eql('CREATED');\r",
									"})\r",
									"\r",
									"if(responseData) {\r",
									"    const userId = response.data.id;\r",
									"    pm.environment.set('user_id', userId);\r",
									"\r",
									"    pm.test(\"Check body response keys\", () => {\r",
									"        pm.expect(response).to.have.all.keys('status', 'data', 'message')\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check data keys in response\", () => {\r",
									"        pm.expect(responseData).to.have.all.keys('nickName', 'password', 'email', 'role', 'avatar', 'deletedAt', 'createdAt', 'id')\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check types response body\", () => {\r",
									"        pm.expect(response).to.be.an('object');\r",
									"        pm.expect(response.status).to.be.an('number');\r",
									"        pm.expect(response.message).to.be.an('string');\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"    })\r",
									"\r",
									"    pm.test(\"Check types field data in response\", () => {\r",
									"        for(k in responseData) {\r",
									"            switch(k) {\r",
									"                case 'id':\r",
									"                    pm.expect(responseData[k]).to.be.an('number');\r",
									"                    break;\r",
									"                case 'avatar':     \r",
									"                case 'deletedAt':\r",
									"                    pm.expect(responseData[k]).to.be.an('null');\r",
									"                    break;\r",
									"                default:\r",
									"                    pm.expect(responseData[k]).to.be.an('string');\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check nickName on eql\", () => {\r",
									"        const nickName = responseData.nickName;\r",
									"        pm.expect(nickName).to.eql(requestBody.nickName);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check email on eql\", () => {\r",
									"        const email = responseData.email;\r",
									"        pm.expect(email).to.eql(requestBody.email);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check response password on not eql with request password\", () => {\r",
									"        const password = responseData.password;\r",
									"        pm.expect(password).to.not.eql(requestBody.password);\r",
									"    });\r",
									"}\r",
									"\r",
									"if(!responseData) {\r",
									"    const status = response.status;\r",
									"\r",
									"    pm.test(\"Check body response keys\", () => {\r",
									"        pm.expect(response).to.have.all.keys('status', 'error', 'message')\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check types response body\", () => {\r",
									"        pm.expect(response).to.be.an('object');\r",
									"        pm.expect(response.status).to.be.an('number');\r",
									"        pm.expect(response.message).to.be.an('string');\r",
									"        pm.expect(response.error).to.be.an('string');\r",
									"    })\r",
									"    \r",
									"    if(status === 409) {\r",
									"        pm.test(\"Status code is 409\", () => {\r",
									"            pm.response.to.have.status(409);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check response value in message\", () => {\r",
									"            pm.expect(response.error).to.eql('CONFLICT');\r",
									"        })\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nickName\": \"{{nickName}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/registration",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const responseData = response.data;\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(responseData) {\r",
									"    pm.environment.set('access_token', responseData.access);\r",
									"    pm.environment.set('refresh_token', responseData.refresh);\r",
									"    pm.environment.set('clientKey', responseData.clientKey);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\",\r\n    \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/login",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const responseData = response.data;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(responseData) {\r",
									"    pm.environment.set('access_token', responseData.access);\r",
									"    pm.environment.set('refresh_token', responseData.refresh);\r",
									"    pm.environment.set('clientKey', responseData.clientKey);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{refresh_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientKey\": \"{{clientKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/refresh",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientKey\": \"{{clientKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/logout",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Sent Email ForgotPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json().data.forgot;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/forgotPassword",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"forgotPassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const responseData = response.data;\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check message and status\", () => {\r",
									"    const message = response.message;\r",
									"    const status = response.status;\r",
									"\r",
									"    pm.expect(message).to.be.an('string').that.to.eql('OK');\r",
									"    pm.expect(status).to.be.an('number').that.to.eql(200);\r",
									"});\r",
									"\r",
									"if(responseData) {\r",
									"    pm.test(\"Check message and status\", () => {\r",
									"        pm.expect(responseData).to.be.an('string').that.to.eql('Пароль було усмішно змінено!');\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{forgot_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{newPassword}}\",\r\n    \"clientKey\": \"{{clientKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/forgotPassword",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"forgotPassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Login After Change Passwor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const responseData = response.data;\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(responseData) {\r",
									"    pm.environment.set('access_token', responseData.access);\r",
									"    pm.environment.set('refresh_token', responseData.refresh);\r",
									"    pm.environment.set('clientKey', responseData.clientKey);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{newPassword}}\",\r\n    \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/login",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Registration with Avatar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const requestBody = pm.request.body.formdata;\r",
									"\r",
									"const responseData = response.data;\r",
									"\r",
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check repsonse value in status\", () => {\r",
									"    const status = response.status;\r",
									"    pm.expect(status).to.eql(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response value in message\", () => {\r",
									"    const message = response.message;\r",
									"    pm.expect(message).to.eql('CREATED');\r",
									"})\r",
									"\r",
									"if(responseData) {\r",
									"    const userId = responseData.id;\r",
									"    const avatar = responseData.avatar;\r",
									"    pm.environment.set('user_id', userId);\r",
									"    pm.environment.set('avatar', avatar);\r",
									"\r",
									"    pm.test(\"Check body response keys\", () => {\r",
									"        pm.expect(response).to.have.all.keys('status', 'data', 'message')\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check data keys in response\", () => {\r",
									"        pm.expect(responseData).to.have.all.keys('nickName', 'password', 'email', 'role', 'avatar', 'deletedAt', 'createdAt', 'id')\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check types response body\", () => {\r",
									"        pm.expect(response).to.be.an('object');\r",
									"        pm.expect(response.status).to.be.an('number');\r",
									"        pm.expect(response.message).to.be.an('string');\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"    })\r",
									"\r",
									"    pm.test(\"Check types field data in response\", () => {\r",
									"        for(k in responseData) {\r",
									"            switch(k) {\r",
									"                case 'id':\r",
									"                    pm.expect(responseData[k]).to.be.an('number');\r",
									"                    break;\r",
									"                case 'deletedAt':\r",
									"                    pm.expect(responseData[k]).to.be.an('null');\r",
									"                    break;\r",
									"                default:\r",
									"                    pm.expect(responseData[k]).to.be.an('string');\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check request and response on eql\", () => {\r",
									"        const nickName = responseData.nickName;\r",
									"        const email = responseData.email;\r",
									"        const password = responseData.password;\r",
									"        requestBody.map(req => {\r",
									"            switch(req.key) {\r",
									"                case 'nickName':\r",
									"                    pm.expect(nickName).to.eql(req.value);\r",
									"                    break;\r",
									"                case 'email':\r",
									"                    pm.expect(email).to.eql(requestBody.email);\r",
									"                    break;\r",
									"                case 'password':\r",
									"                    pm.expect(password).to.not.eql(requestBody.password);\r",
									"            }\r",
									"        })\r",
									"    });\r",
									"}\r",
									"\r",
									"if(!responseData) {\r",
									"    const status = response.status;\r",
									"\r",
									"    pm.test(\"Check body response keys\", () => {\r",
									"        pm.expect(response).to.have.all.keys('status', 'error', 'message')\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check types response body\", () => {\r",
									"        pm.expect(response).to.be.an('object');\r",
									"        pm.expect(response.status).to.be.an('number');\r",
									"        pm.expect(response.message).to.be.an('string');\r",
									"        pm.expect(response.error).to.be.an('string');\r",
									"    })\r",
									"    \r",
									"    if(status === 409) {\r",
									"        pm.test(\"Status code is 409\", () => {\r",
									"            pm.response.to.have.status(409);\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check response value in message\", () => {\r",
									"            pm.expect(response.error).to.eql('CONFLICT');\r",
									"        })\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nickName",
									"value": "{{nickName}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "avatar",
									"type": "file",
									"src": "./test/files/1.jpg"
								}
							]
						},
						"url": {
							"raw": "{{localhost}}/auth/registration",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"const responseData = response.data;\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(responseData) {\r",
									"    pm.environment.set('access_token', responseData.access);\r",
									"    pm.environment.set('refresh_token', responseData.refresh);\r",
									"    pm.environment.set('clientKey', responseData.clientKey);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{password}}\",\r\n    \"email\": \"{{email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/auth/login",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/users",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Will Read USer",
			"item": [
				{
					"name": "Create Wil lRead for User",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 2,\r\n    \"bookId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/willRead",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"willRead"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Author",
			"item": [
				{
					"name": "Create Author",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"yura\",\r\n    \"lastName\": \"cheban\",\r\n    \"pseudonym\": \"wwwxcdk\",\r\n    \"dateBirthday\": \"1997-02-22\",\r\n    \"country\": \"usa\",\r\n    \"age\": 23,\r\n    \"biography\": \"not true info\",\r\n    \"genres\": [1, 2]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/authors",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Authors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/authors",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "Create Book",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"spider man\",\r\n    \"description\": \"c\",\r\n    \"authorId\": 2,\r\n    \"fileText\": \"c\",\r\n    \"genres\": [1, 2]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/books",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Books",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/books",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create Comments",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"bookId\": 1,\r\n    \"text\": \"gtrfvd sfacfsadcddasdasx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/comments",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Like or DisLike",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"like\": true,\r\n    \"userId\": 1,\r\n    \"commentId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/comments/likes",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"comments",
								"likes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Favorites",
			"item": [
				{
					"name": "Create Favorites",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"bookId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/favorites",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Genre",
			"item": [
				{
					"name": "Create Genre",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Драма\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/genres",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "get One Genre",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/genres/1",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"genres",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Genres",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localhost}}/genres",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"genres"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rating Book",
			"item": [
				{
					"name": "Create Rating For Book",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rate\": 7,\r\n    \"userId\": 1,\r\n    \"bookId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/ratings",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"ratings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Already Read",
			"item": [
				{
					"name": "Create Already Reads",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 1,\r\n    \"bookId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localhost}}/alreadyread",
							"host": [
								"{{localhost}}"
							],
							"path": [
								"alreadyread"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
